<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20211.21.0420.1112                               -->
<workbook original-version='18.1' source-build='2021.1.1 (20211.21.0420.1112)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='24-04' inline='true' name='federated.1bx7qx20vpkotg14d91mc0vw9rum' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='24-04' name='textscan.04po5vv0yjketf12pdthq0wqywhh'>
            <connection class='textscan' directory='D:/3rd Year/data-visualization/Lab2/data' filename='24-04.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='24-04.csv' table='[24-04#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='CountryOther' ordinal='0' />
            <column datatype='integer' name='TotalCases' ordinal='1' />
            <column datatype='integer' name='NewCases' ordinal='2' />
            <column datatype='integer' name='TotalDeaths' ordinal='3' />
            <column datatype='integer' name='NewDeaths' ordinal='4' />
            <column datatype='integer' name='TotalRecovered' ordinal='5' />
            <column datatype='integer' name='NewRecovered' ordinal='6' />
            <column datatype='integer' name='ActiveCases' ordinal='7' />
            <column datatype='integer' name='SeriousCritical' ordinal='8' />
            <column datatype='date' name='Date' ordinal='9' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='24-04.csv' table='[24-04#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='CountryOther' ordinal='0' />
            <column datatype='integer' name='TotalCases' ordinal='1' />
            <column datatype='integer' name='NewCases' ordinal='2' />
            <column datatype='integer' name='TotalDeaths' ordinal='3' />
            <column datatype='integer' name='NewDeaths' ordinal='4' />
            <column datatype='integer' name='TotalRecovered' ordinal='5' />
            <column datatype='integer' name='NewRecovered' ordinal='6' />
            <column datatype='integer' name='ActiveCases' ordinal='7' />
            <column datatype='integer' name='SeriousCritical' ordinal='8' />
            <column datatype='date' name='Date' ordinal='9' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[24-04.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CountryOther</remote-name>
            <remote-type>129</remote-type>
            <local-name>[CountryOther]</local-name>
            <parent-name>[24-04.csv]</parent-name>
            <remote-alias>CountryOther</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalCases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalCases]</local-name>
            <parent-name>[24-04.csv]</parent-name>
            <remote-alias>TotalCases</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NewCases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[NewCases]</local-name>
            <parent-name>[24-04.csv]</parent-name>
            <remote-alias>NewCases</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalDeaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalDeaths]</local-name>
            <parent-name>[24-04.csv]</parent-name>
            <remote-alias>TotalDeaths</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NewDeaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[NewDeaths]</local-name>
            <parent-name>[24-04.csv]</parent-name>
            <remote-alias>NewDeaths</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalRecovered</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalRecovered]</local-name>
            <parent-name>[24-04.csv]</parent-name>
            <remote-alias>TotalRecovered</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NewRecovered</remote-name>
            <remote-type>20</remote-type>
            <local-name>[NewRecovered]</local-name>
            <parent-name>[24-04.csv]</parent-name>
            <remote-alias>NewRecovered</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ActiveCases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ActiveCases]</local-name>
            <parent-name>[24-04.csv]</parent-name>
            <remote-alias>ActiveCases</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SeriousCritical</remote-name>
            <remote-type>20</remote-type>
            <local-name>[SeriousCritical]</local-name>
            <parent-name>[24-04.csv]</parent-name>
            <remote-alias>SeriousCritical</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Date]</local-name>
            <parent-name>[24-04.csv]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>9</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;' value='Active Cases (phụ thuộc)' />
        </aliases>
      </column>
      <column caption='Active Cases' datatype='integer' name='[ActiveCases]' role='measure' type='quantitative' />
      <column caption='Country Other' datatype='string' name='[CountryOther]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='New Cases' datatype='integer' name='[NewCases]' role='measure' type='quantitative' />
      <column caption='New Deaths' datatype='integer' name='[NewDeaths]' role='measure' type='quantitative' />
      <column caption='New Recovered' datatype='integer' name='[NewRecovered]' role='measure' type='quantitative' />
      <column caption='Serious Critical' datatype='integer' name='[SeriousCritical]' role='measure' type='quantitative' />
      <column caption='Total Cases' datatype='integer' name='[TotalCases]' role='measure' type='quantitative' />
      <column caption='Total Deaths' datatype='integer' name='[TotalDeaths]' role='measure' type='quantitative' />
      <column caption='Total Recovered' datatype='integer' name='[TotalRecovered]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='24-04.csv' datatype='table' name='[__tableau_internal_object_id__].[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]' role='measure' type='quantitative' />
      <column-instance column='[ActiveCases]' derivation='Attribute' name='[attr:ActiveCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalCases]' derivation='Attribute' name='[attr:TotalCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalCases]' derivation='Count' name='[cnt:TotalCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalRecovered]' derivation='Count' name='[cnt:TotalRecovered:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalRecovered]' derivation='Sum' name='[diff:sum:TotalRecovered:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[ActiveCases]' derivation='None' name='[none:ActiveCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CountryOther]' derivation='None' name='[none:CountryOther:nk]' pivot='key' type='nominal' />
      <column-instance column='[NewCases]' derivation='None' name='[none:NewCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[NewDeaths]' derivation='None' name='[none:NewDeaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalCases]' derivation='None' name='[none:TotalCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalDeaths]' derivation='None' name='[none:TotalDeaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalRecovered]' derivation='None' name='[none:TotalRecovered:qk]' pivot='key' type='quantitative' />
      <column-instance column='[ActiveCases]' derivation='Sum' name='[sum:ActiveCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[NewCases]' derivation='Sum' name='[sum:NewCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[NewDeaths]' derivation='Sum' name='[sum:NewDeaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalCases]' derivation='Sum' name='[sum:TotalCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalDeaths]' derivation='Sum' name='[sum:TotalDeaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalRecovered]' derivation='Sum' name='[sum:TotalRecovered:qk]' pivot='key' type='quantitative' />
      <column-instance column='[ActiveCases]' derivation='Var' name='[var:ActiveCases:qk]' pivot='key' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:CountryOther:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sint Maarten&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Diamond Princess&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Turks and Caicos&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Caribbean Netherlands&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;DRC&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;UK&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Réunion&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;UAE&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;St. Barth&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;S. Korea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;St. Vincent Grenadines&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Saint Martin&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Wallis and Futuna&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;CAR&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mayotte&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[attr:TotalCases:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[cnt:TotalCases:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:TotalCases:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:NewDeaths:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:NewDeaths:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:ActiveCases:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[var:ActiveCases:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[attr:ActiveCases:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[cnt:TotalRecovered:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[diff:sum:TotalRecovered:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:TotalRecovered:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:NewCases:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:NewCases:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:TotalDeaths:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='24-04.csv' id='24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A'>
            <properties context=''>
              <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='24-04.csv' table='[24-04#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='CountryOther' ordinal='0' />
                  <column datatype='integer' name='TotalCases' ordinal='1' />
                  <column datatype='integer' name='NewCases' ordinal='2' />
                  <column datatype='integer' name='TotalDeaths' ordinal='3' />
                  <column datatype='integer' name='NewDeaths' ordinal='4' />
                  <column datatype='integer' name='TotalRecovered' ordinal='5' />
                  <column datatype='integer' name='NewRecovered' ordinal='6' />
                  <column datatype='integer' name='ActiveCases' ordinal='7' />
                  <column datatype='integer' name='SeriousCritical' ordinal='8' />
                  <column datatype='date' name='Date' ordinal='9' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Quan hệ tuyến tính 2 biến'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Quan hệ tuyến tính 2 biến</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='24-04' name='federated.1bx7qx20vpkotg14d91mc0vw9rum' />
          </datasources>
          <datasource-dependencies datasource='federated.1bx7qx20vpkotg14d91mc0vw9rum'>
            <column caption='Active Cases' datatype='integer' name='[ActiveCases]' role='measure' type='quantitative' />
            <column caption='Country Other' datatype='string' name='[CountryOther]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Serious Critical' datatype='integer' name='[SeriousCritical]' role='measure' type='quantitative' />
            <column caption='Total Cases' datatype='integer' name='[TotalCases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[TotalDeaths]' role='measure' type='quantitative' />
            <column caption='Total Recovered' datatype='integer' name='[TotalRecovered]' role='measure' type='quantitative' />
            <column-instance column='[CountryOther]' derivation='None' name='[none:CountryOther:nk]' pivot='key' type='nominal' />
            <column-instance column='[ActiveCases]' derivation='Sum' name='[sum:ActiveCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SeriousCritical]' derivation='Sum' name='[sum:SeriousCritical:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalCases]' derivation='Sum' name='[sum:TotalCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalDeaths]' derivation='Sum' name='[sum:TotalDeaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalRecovered]' derivation='Sum' name='[sum:TotalRecovered:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.47176796197891235' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.47176796197891235' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.47176796197891235' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.47176796197891235' />
              </style-rule>
            </style>
          </pane>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.47176796197891235' />
              </style-rule>
            </style>
          </pane>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:SeriousCritical:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.47176796197891235' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk] + ([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk] + ([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk] + ([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk] + [federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:SeriousCritical:qk]))))</rows>
        <cols>([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk] + ([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk] + ([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk] + ([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk] + [federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:SeriousCritical:qk]))))</cols>
      </table>
      <simple-id uuid='{4313C3BA-3F88-4754-BD98-B5D06919ABBB}' />
    </worksheet>
    <worksheet name='Total Cases - Total Deaths - Active Cases'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Total Cases - Total Deaths - Active Cases
</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='24-04' name='federated.1bx7qx20vpkotg14d91mc0vw9rum' />
          </datasources>
          <datasource-dependencies datasource='federated.1bx7qx20vpkotg14d91mc0vw9rum'>
            <column caption='Active Cases' datatype='integer' name='[ActiveCases]' role='measure' type='quantitative' />
            <column caption='Country Other' datatype='string' name='[CountryOther]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Total Cases' datatype='integer' name='[TotalCases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[TotalDeaths]' role='measure' type='quantitative' />
            <column-instance column='[CountryOther]' derivation='None' name='[none:CountryOther:nk]' pivot='key' type='nominal' />
            <column-instance column='[ActiveCases]' derivation='Sum' name='[sum:ActiveCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalCases]' derivation='Sum' name='[sum:TotalCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalDeaths]' derivation='Sum' name='[sum:TotalDeaths:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([TotalCases])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:CountryOther:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' direction='DESC' using='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]' />
          <slices>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</column>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-markers-mode' value='all' />
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[Multiple Values]</rows>
        <cols>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</cols>
      </table>
      <simple-id uuid='{35AD13AA-8B82-4D17-B1E5-D8344DFCD11F}' />
    </worksheet>
    <worksheet name='Total Cases - Total Deaths - Total Recovered'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Total Cases - Total Deaths - Total Recovered
</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='24-04' name='federated.1bx7qx20vpkotg14d91mc0vw9rum' />
          </datasources>
          <datasource-dependencies datasource='federated.1bx7qx20vpkotg14d91mc0vw9rum'>
            <column caption='Country Other' datatype='string' name='[CountryOther]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Total Cases' datatype='integer' name='[TotalCases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[TotalDeaths]' role='measure' type='quantitative' />
            <column caption='Total Recovered' datatype='integer' name='[TotalRecovered]' role='measure' type='quantitative' />
            <column-instance column='[CountryOther]' derivation='None' name='[none:CountryOther:nk]' pivot='key' type='nominal' />
            <column-instance column='[TotalCases]' derivation='Sum' name='[sum:TotalCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalDeaths]' derivation='Sum' name='[sum:TotalDeaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalRecovered]' derivation='Sum' name='[sum:TotalRecovered:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([TotalCases])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:CountryOther:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' direction='DESC' using='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]' />
          <slices>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</column>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-markers-mode' value='all' />
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[Multiple Values]</rows>
        <cols>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</cols>
      </table>
      <simple-id uuid='{353BC7F6-600E-4DFD-86CA-1240A2532103}' />
    </worksheet>
    <worksheet name='Total Cases - Total Deaths - Total Recovered - Active Cases'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Total Cases - Total Deaths - Total Recovered - Active Cases
</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='24-04' name='federated.1bx7qx20vpkotg14d91mc0vw9rum' />
          </datasources>
          <datasource-dependencies datasource='federated.1bx7qx20vpkotg14d91mc0vw9rum'>
            <column caption='Active Cases' datatype='integer' name='[ActiveCases]' role='measure' type='quantitative' />
            <column caption='Country Other' datatype='string' name='[CountryOther]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Total Cases' datatype='integer' name='[TotalCases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[TotalDeaths]' role='measure' type='quantitative' />
            <column caption='Total Recovered' datatype='integer' name='[TotalRecovered]' role='measure' type='quantitative' />
            <column-instance column='[CountryOther]' derivation='None' name='[none:CountryOther:nk]' pivot='key' type='nominal' />
            <column-instance column='[ActiveCases]' derivation='Sum' name='[sum:ActiveCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalCases]' derivation='Sum' name='[sum:TotalCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalDeaths]' derivation='Sum' name='[sum:TotalDeaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalRecovered]' derivation='Sum' name='[sum:TotalRecovered:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([TotalCases])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:CountryOther:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' direction='DESC' using='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]' />
          <slices>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</column>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-markers-mode' value='all' />
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[Multiple Values]</rows>
        <cols>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</cols>
      </table>
      <simple-id uuid='{498A2DC8-4154-40DF-A3F6-7C37A85E8DBD}' />
    </worksheet>
    <worksheet name='Total Cases - Total Recovered - Active Cases'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Total Cases - Total Recovered - Active Cases
</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='24-04' name='federated.1bx7qx20vpkotg14d91mc0vw9rum' />
          </datasources>
          <datasource-dependencies datasource='federated.1bx7qx20vpkotg14d91mc0vw9rum'>
            <column caption='Active Cases' datatype='integer' name='[ActiveCases]' role='measure' type='quantitative' />
            <column caption='Country Other' datatype='string' name='[CountryOther]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Total Cases' datatype='integer' name='[TotalCases]' role='measure' type='quantitative' />
            <column caption='Total Recovered' datatype='integer' name='[TotalRecovered]' role='measure' type='quantitative' />
            <column-instance column='[CountryOther]' derivation='None' name='[none:CountryOther:nk]' pivot='key' type='nominal' />
            <column-instance column='[ActiveCases]' derivation='Sum' name='[sum:ActiveCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalCases]' derivation='Sum' name='[sum:TotalCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalRecovered]' derivation='Sum' name='[sum:TotalRecovered:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([TotalCases])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:CountryOther:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' direction='DESC' using='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]' />
          <slices>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</column>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-markers-mode' value='all' />
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[Multiple Values]</rows>
        <cols>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</cols>
      </table>
      <simple-id uuid='{3DC601B7-DFB3-40DE-A1DC-2A588514CABB}' />
    </worksheet>
    <worksheet name='phương'>
      <table>
        <view>
          <datasources>
            <datasource caption='24-04' name='federated.1bx7qx20vpkotg14d91mc0vw9rum' />
          </datasources>
          <datasource-dependencies datasource='federated.1bx7qx20vpkotg14d91mc0vw9rum'>
            <column caption='Active Cases' datatype='integer' name='[ActiveCases]' role='measure' type='quantitative' />
            <column caption='Country Other' datatype='string' name='[CountryOther]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Total Cases' datatype='integer' name='[TotalCases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[TotalDeaths]' role='measure' type='quantitative' />
            <column caption='Total Recovered' datatype='integer' name='[TotalRecovered]' role='measure' type='quantitative' />
            <column-instance column='[CountryOther]' derivation='None' name='[none:CountryOther:nk]' pivot='key' type='nominal' />
            <column-instance column='[ActiveCases]' derivation='Sum' name='[sum:ActiveCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalCases]' derivation='Sum' name='[sum:TotalCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalDeaths]' derivation='Sum' name='[sum:TotalDeaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalRecovered]' derivation='Sum' name='[sum:TotalRecovered:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]' included-values='in-range'>
            <min>3080344</min>
            <max>25339874</max>
          </filter>
          <slices>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]' palette='red_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]' />
              <size column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]' />
              <text column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='2.6408839225769043' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='shape' value=':filled/circle' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]</rows>
        <cols>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]</cols>
      </table>
      <simple-id uuid='{C1E4E83F-623A-44CF-9A49-6EB3CABA7DEF}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='Total Cases - Total Deaths - Total Recovered - Active Cases'>
      <cards>
        <edge name='left'>
          <strip size='241'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='197'>
            <card pane-specification-id='7' param='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</field>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6FD2F5BD-595E-4736-A882-598A5F111ED7}' />
    </window>
    <window class='worksheet' maximized='true' name='Total Cases - Total Deaths - Total Recovered'>
      <cards>
        <edge name='left'>
          <strip size='241'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='197'>
            <card pane-specification-id='7' param='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</field>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5C9B17AE-0A1E-489B-9CA5-7B95F1FDB242}' />
    </window>
    <window class='worksheet' name='Total Cases - Total Deaths - Active Cases'>
      <cards>
        <edge name='left'>
          <strip size='241'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='197'>
            <card pane-specification-id='7' param='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</field>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{633BF36A-BB79-4B74-849F-A2B59A6E6113}' />
    </window>
    <window class='worksheet' name='Total Cases - Total Recovered - Active Cases'>
      <cards>
        <edge name='left'>
          <strip size='241'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='197'>
            <card pane-specification-id='7' param='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight field='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]'>
          <color-one-way>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</field>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</field>
          </color-one-way>
          <bucket-selection>
            <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]&quot;</bucket>
          </bucket-selection>
        </highlight>
      </viewpoint>
      <simple-id uuid='{30371DE9-2371-4521-9C5F-D8DE95AAFB13}' />
    </window>
    <window class='worksheet' name='Quan hệ tuyến tính 2 biến'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5A133FCC-25AB-49CD-A2D7-945A1314CCCC}' />
    </window>
    <window class='worksheet' name='phương'>
      <cards>
        <edge name='left'>
          <strip size='224'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]' type='size' />
            <card pane-specification-id='0' param='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight field='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]' type='size'>
          <bucket-selection />
        </highlight>
      </viewpoint>
      <simple-id uuid='{86C65210-77E7-46FB-A145-CAA0227B329F}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Quan hệ tuyến tính 2 biến' width='192'>
      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
      y6B9+vSQPwASPMr1AoC0xQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Total Cases - Total Deaths - Active Cases' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Total Cases - Total Deaths - Total Recovered' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Total Cases - Total Deaths - Total Recovered - Active Cases' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Total Cases - Total Recovered - Active Cases' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='phương' width='192'>
      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
      QmCC
    </thumbnail>
  </thumbnails>
</workbook>
