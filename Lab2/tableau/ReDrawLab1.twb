<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20211.21.0420.1112                               -->
<workbook original-version='18.1' source-build='2021.1.1 (20211.21.0420.1112)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='24-04' inline='true' name='federated.1bx7qx20vpkotg14d91mc0vw9rum' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='24-04' name='textscan.04po5vv0yjketf12pdthq0wqywhh'>
            <connection class='textscan' directory='D:/3rd Year/data-visualization/Lab2/data' filename='24-04.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation all='true' name='24-04.csv+' type='union'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='CountryOther' />
            <column datatype='integer' name='TotalCases' />
            <column datatype='integer' name='NewCases' />
            <column datatype='integer' name='TotalDeaths' />
            <column datatype='integer' name='NewDeaths' />
            <column datatype='integer' name='TotalRecovered' />
            <column datatype='integer' name='NewRecovered' />
            <column datatype='real' name='ActiveCases' />
            <column datatype='real' name='SeriousCritical' />
            <column datatype='date' name='Date' />
            <column datatype='string' name='Table Name' />
          </columns>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='24-04.csv' table='[24-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='integer' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='14-04.csv' table='[14-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='integer' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='15-04.csv' table='[15-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='real' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='16-04.csv' table='[16-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='real' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='17-04.csv' table='[17-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='real' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='18-04.csv' table='[18-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='real' name='ActiveCases' ordinal='7' />
              <column datatype='integer' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='19-04.csv' table='[19-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='real' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='20-04.csv' table='[20-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='real' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='21-04.csv' table='[21-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='ActiveCases' ordinal='6' />
              <column datatype='integer' name='NewRecovered' ordinal='7' />
              <column datatype='integer' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='22-04.csv' table='[22-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='integer' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='23-04.csv' table='[23-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='integer' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation all='true' name='24-04.csv+' type='union'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='CountryOther' />
            <column datatype='integer' name='TotalCases' />
            <column datatype='integer' name='NewCases' />
            <column datatype='integer' name='TotalDeaths' />
            <column datatype='integer' name='NewDeaths' />
            <column datatype='integer' name='TotalRecovered' />
            <column datatype='integer' name='NewRecovered' />
            <column datatype='real' name='ActiveCases' />
            <column datatype='real' name='SeriousCritical' />
            <column datatype='date' name='Date' />
            <column datatype='string' name='Table Name' />
          </columns>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='24-04.csv' table='[24-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='integer' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='14-04.csv' table='[14-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='integer' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='15-04.csv' table='[15-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='real' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='16-04.csv' table='[16-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='real' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='17-04.csv' table='[17-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='real' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='18-04.csv' table='[18-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='real' name='ActiveCases' ordinal='7' />
              <column datatype='integer' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='19-04.csv' table='[19-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='real' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='20-04.csv' table='[20-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='real' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='21-04.csv' table='[21-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='ActiveCases' ordinal='6' />
              <column datatype='integer' name='NewRecovered' ordinal='7' />
              <column datatype='integer' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='22-04.csv' table='[22-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='integer' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='23-04.csv' table='[23-04#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='CountryOther' ordinal='0' />
              <column datatype='integer' name='TotalCases' ordinal='1' />
              <column datatype='integer' name='NewCases' ordinal='2' />
              <column datatype='integer' name='TotalDeaths' ordinal='3' />
              <column datatype='integer' name='NewDeaths' ordinal='4' />
              <column datatype='integer' name='TotalRecovered' ordinal='5' />
              <column datatype='integer' name='NewRecovered' ordinal='6' />
              <column datatype='integer' name='ActiveCases' ordinal='7' />
              <column datatype='integer' name='SeriousCritical' ordinal='8' />
              <column datatype='date' name='Date' ordinal='9' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[24-04.csv+]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CountryOther</remote-name>
            <remote-type>129</remote-type>
            <local-name>[CountryOther]</local-name>
            <parent-name>[24-04.csv+]</parent-name>
            <remote-alias>CountryOther</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalCases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalCases]</local-name>
            <parent-name>[24-04.csv+]</parent-name>
            <remote-alias>TotalCases</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NewCases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[NewCases]</local-name>
            <parent-name>[24-04.csv+]</parent-name>
            <remote-alias>NewCases</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalDeaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalDeaths]</local-name>
            <parent-name>[24-04.csv+]</parent-name>
            <remote-alias>TotalDeaths</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NewDeaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[NewDeaths]</local-name>
            <parent-name>[24-04.csv+]</parent-name>
            <remote-alias>NewDeaths</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalRecovered</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalRecovered]</local-name>
            <parent-name>[24-04.csv+]</parent-name>
            <remote-alias>TotalRecovered</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NewRecovered</remote-name>
            <remote-type>20</remote-type>
            <local-name>[NewRecovered]</local-name>
            <parent-name>[24-04.csv+]</parent-name>
            <remote-alias>NewRecovered</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ActiveCases</remote-name>
            <remote-type>5</remote-type>
            <local-name>[ActiveCases]</local-name>
            <parent-name>[24-04.csv+]</parent-name>
            <remote-alias>ActiveCases</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SeriousCritical</remote-name>
            <remote-type>5</remote-type>
            <local-name>[SeriousCritical]</local-name>
            <parent-name>[24-04.csv+]</parent-name>
            <remote-alias>SeriousCritical</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Date]</local-name>
            <parent-name>[24-04.csv+]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>9</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Table Name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Table Name]</local-name>
            <parent-name>[24-04.csv+]</parent-name>
            <remote-alias>Table Name</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;' value='Active Cases (phụ thuộc)' />
        </aliases>
      </column>
      <column caption='Active Cases' datatype='real' name='[ActiveCases]' role='measure' type='quantitative' />
      <column caption='Country Other' datatype='string' name='[CountryOther]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='New Cases' datatype='integer' name='[NewCases]' role='measure' type='quantitative' />
      <column caption='New Deaths' datatype='integer' name='[NewDeaths]' role='measure' type='quantitative' />
      <column caption='New Recovered' datatype='integer' name='[NewRecovered]' role='measure' type='quantitative' />
      <column caption='Serious Critical' datatype='real' name='[SeriousCritical]' role='measure' type='quantitative' />
      <column caption='Total Cases' datatype='integer' name='[TotalCases]' role='measure' type='quantitative' />
      <column caption='Total Deaths' datatype='integer' name='[TotalDeaths]' role='measure' type='quantitative' />
      <column caption='Total Recovered' datatype='integer' name='[TotalRecovered]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='24-04.csv' datatype='table' name='[__tableau_internal_object_id__].[24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A]' role='measure' type='quantitative' />
      <column-instance column='[ActiveCases]' derivation='Attribute' name='[attr:ActiveCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalCases]' derivation='Attribute' name='[attr:TotalCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalCases]' derivation='Count' name='[cnt:TotalCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalRecovered]' derivation='Count' name='[cnt:TotalRecovered:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalRecovered]' derivation='Sum' name='[diff:sum:TotalRecovered:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[ActiveCases]' derivation='None' name='[none:ActiveCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CountryOther]' derivation='None' name='[none:CountryOther:nk]' pivot='key' type='nominal' />
      <column-instance column='[NewCases]' derivation='None' name='[none:NewCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[NewDeaths]' derivation='None' name='[none:NewDeaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalCases]' derivation='None' name='[none:TotalCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalDeaths]' derivation='None' name='[none:TotalDeaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalRecovered]' derivation='None' name='[none:TotalRecovered:qk]' pivot='key' type='quantitative' />
      <column-instance column='[ActiveCases]' derivation='Sum' name='[sum:ActiveCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[NewCases]' derivation='Sum' name='[sum:NewCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[NewDeaths]' derivation='Sum' name='[sum:NewDeaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalCases]' derivation='Sum' name='[sum:TotalCases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalDeaths]' derivation='Sum' name='[sum:TotalDeaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TotalRecovered]' derivation='Sum' name='[sum:TotalRecovered:qk]' pivot='key' type='quantitative' />
      <column-instance column='[ActiveCases]' derivation='Var' name='[var:ActiveCases:qk]' pivot='key' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:CountryOther:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sint Maarten&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Diamond Princess&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Turks and Caicos&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Caribbean Netherlands&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;DRC&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;UK&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Réunion&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;UAE&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;St. Barth&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;S. Korea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;St. Vincent Grenadines&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Saint Martin&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Wallis and Futuna&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;CAR&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mayotte&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[attr:TotalCases:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[cnt:TotalCases:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:TotalCases:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:NewDeaths:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:NewDeaths:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:ActiveCases:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[var:ActiveCases:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[attr:ActiveCases:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[cnt:TotalRecovered:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[diff:sum:TotalRecovered:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:TotalRecovered:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:NewCases:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:NewCases:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:TotalDeaths:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='24-04.csv' id='24-04.csv_F3F83E04A2444CCBA3A23BC017457C3A'>
            <properties context=''>
              <relation all='true' name='24-04.csv+' type='union'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='CountryOther' />
                  <column datatype='integer' name='TotalCases' />
                  <column datatype='integer' name='NewCases' />
                  <column datatype='integer' name='TotalDeaths' />
                  <column datatype='integer' name='NewDeaths' />
                  <column datatype='integer' name='TotalRecovered' />
                  <column datatype='integer' name='NewRecovered' />
                  <column datatype='real' name='ActiveCases' />
                  <column datatype='real' name='SeriousCritical' />
                  <column datatype='date' name='Date' />
                  <column datatype='string' name='Table Name' />
                </columns>
                <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='24-04.csv' table='[24-04#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                    <column datatype='string' name='CountryOther' ordinal='0' />
                    <column datatype='integer' name='TotalCases' ordinal='1' />
                    <column datatype='integer' name='NewCases' ordinal='2' />
                    <column datatype='integer' name='TotalDeaths' ordinal='3' />
                    <column datatype='integer' name='NewDeaths' ordinal='4' />
                    <column datatype='integer' name='TotalRecovered' ordinal='5' />
                    <column datatype='integer' name='NewRecovered' ordinal='6' />
                    <column datatype='integer' name='ActiveCases' ordinal='7' />
                    <column datatype='integer' name='SeriousCritical' ordinal='8' />
                    <column datatype='date' name='Date' ordinal='9' />
                  </columns>
                </relation>
                <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='14-04.csv' table='[14-04#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                    <column datatype='string' name='CountryOther' ordinal='0' />
                    <column datatype='integer' name='TotalCases' ordinal='1' />
                    <column datatype='integer' name='NewCases' ordinal='2' />
                    <column datatype='integer' name='TotalDeaths' ordinal='3' />
                    <column datatype='integer' name='NewDeaths' ordinal='4' />
                    <column datatype='integer' name='TotalRecovered' ordinal='5' />
                    <column datatype='integer' name='NewRecovered' ordinal='6' />
                    <column datatype='integer' name='ActiveCases' ordinal='7' />
                    <column datatype='integer' name='SeriousCritical' ordinal='8' />
                    <column datatype='date' name='Date' ordinal='9' />
                  </columns>
                </relation>
                <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='15-04.csv' table='[15-04#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                    <column datatype='string' name='CountryOther' ordinal='0' />
                    <column datatype='integer' name='TotalCases' ordinal='1' />
                    <column datatype='integer' name='NewCases' ordinal='2' />
                    <column datatype='integer' name='TotalDeaths' ordinal='3' />
                    <column datatype='integer' name='NewDeaths' ordinal='4' />
                    <column datatype='integer' name='TotalRecovered' ordinal='5' />
                    <column datatype='integer' name='NewRecovered' ordinal='6' />
                    <column datatype='integer' name='ActiveCases' ordinal='7' />
                    <column datatype='real' name='SeriousCritical' ordinal='8' />
                    <column datatype='date' name='Date' ordinal='9' />
                  </columns>
                </relation>
                <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='16-04.csv' table='[16-04#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                    <column datatype='string' name='CountryOther' ordinal='0' />
                    <column datatype='integer' name='TotalCases' ordinal='1' />
                    <column datatype='integer' name='NewCases' ordinal='2' />
                    <column datatype='integer' name='TotalDeaths' ordinal='3' />
                    <column datatype='integer' name='NewDeaths' ordinal='4' />
                    <column datatype='integer' name='TotalRecovered' ordinal='5' />
                    <column datatype='integer' name='NewRecovered' ordinal='6' />
                    <column datatype='integer' name='ActiveCases' ordinal='7' />
                    <column datatype='real' name='SeriousCritical' ordinal='8' />
                    <column datatype='date' name='Date' ordinal='9' />
                  </columns>
                </relation>
                <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='17-04.csv' table='[17-04#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                    <column datatype='string' name='CountryOther' ordinal='0' />
                    <column datatype='integer' name='TotalCases' ordinal='1' />
                    <column datatype='integer' name='NewCases' ordinal='2' />
                    <column datatype='integer' name='TotalDeaths' ordinal='3' />
                    <column datatype='integer' name='NewDeaths' ordinal='4' />
                    <column datatype='integer' name='TotalRecovered' ordinal='5' />
                    <column datatype='integer' name='NewRecovered' ordinal='6' />
                    <column datatype='integer' name='ActiveCases' ordinal='7' />
                    <column datatype='real' name='SeriousCritical' ordinal='8' />
                    <column datatype='date' name='Date' ordinal='9' />
                  </columns>
                </relation>
                <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='18-04.csv' table='[18-04#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                    <column datatype='string' name='CountryOther' ordinal='0' />
                    <column datatype='integer' name='TotalCases' ordinal='1' />
                    <column datatype='integer' name='NewCases' ordinal='2' />
                    <column datatype='integer' name='TotalDeaths' ordinal='3' />
                    <column datatype='integer' name='NewDeaths' ordinal='4' />
                    <column datatype='integer' name='TotalRecovered' ordinal='5' />
                    <column datatype='integer' name='NewRecovered' ordinal='6' />
                    <column datatype='real' name='ActiveCases' ordinal='7' />
                    <column datatype='integer' name='SeriousCritical' ordinal='8' />
                    <column datatype='date' name='Date' ordinal='9' />
                  </columns>
                </relation>
                <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='19-04.csv' table='[19-04#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                    <column datatype='string' name='CountryOther' ordinal='0' />
                    <column datatype='integer' name='TotalCases' ordinal='1' />
                    <column datatype='integer' name='NewCases' ordinal='2' />
                    <column datatype='integer' name='TotalDeaths' ordinal='3' />
                    <column datatype='integer' name='NewDeaths' ordinal='4' />
                    <column datatype='integer' name='TotalRecovered' ordinal='5' />
                    <column datatype='integer' name='NewRecovered' ordinal='6' />
                    <column datatype='integer' name='ActiveCases' ordinal='7' />
                    <column datatype='real' name='SeriousCritical' ordinal='8' />
                    <column datatype='date' name='Date' ordinal='9' />
                  </columns>
                </relation>
                <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='20-04.csv' table='[20-04#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                    <column datatype='string' name='CountryOther' ordinal='0' />
                    <column datatype='integer' name='TotalCases' ordinal='1' />
                    <column datatype='integer' name='NewCases' ordinal='2' />
                    <column datatype='integer' name='TotalDeaths' ordinal='3' />
                    <column datatype='integer' name='NewDeaths' ordinal='4' />
                    <column datatype='integer' name='TotalRecovered' ordinal='5' />
                    <column datatype='integer' name='NewRecovered' ordinal='6' />
                    <column datatype='integer' name='ActiveCases' ordinal='7' />
                    <column datatype='real' name='SeriousCritical' ordinal='8' />
                    <column datatype='date' name='Date' ordinal='9' />
                  </columns>
                </relation>
                <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='21-04.csv' table='[21-04#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                    <column datatype='string' name='CountryOther' ordinal='0' />
                    <column datatype='integer' name='TotalCases' ordinal='1' />
                    <column datatype='integer' name='NewCases' ordinal='2' />
                    <column datatype='integer' name='TotalDeaths' ordinal='3' />
                    <column datatype='integer' name='NewDeaths' ordinal='4' />
                    <column datatype='integer' name='TotalRecovered' ordinal='5' />
                    <column datatype='integer' name='ActiveCases' ordinal='6' />
                    <column datatype='integer' name='NewRecovered' ordinal='7' />
                    <column datatype='integer' name='SeriousCritical' ordinal='8' />
                    <column datatype='date' name='Date' ordinal='9' />
                  </columns>
                </relation>
                <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='22-04.csv' table='[22-04#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                    <column datatype='string' name='CountryOther' ordinal='0' />
                    <column datatype='integer' name='TotalCases' ordinal='1' />
                    <column datatype='integer' name='NewCases' ordinal='2' />
                    <column datatype='integer' name='TotalDeaths' ordinal='3' />
                    <column datatype='integer' name='NewDeaths' ordinal='4' />
                    <column datatype='integer' name='TotalRecovered' ordinal='5' />
                    <column datatype='integer' name='NewRecovered' ordinal='6' />
                    <column datatype='integer' name='ActiveCases' ordinal='7' />
                    <column datatype='integer' name='SeriousCritical' ordinal='8' />
                    <column datatype='date' name='Date' ordinal='9' />
                  </columns>
                </relation>
                <relation connection='textscan.04po5vv0yjketf12pdthq0wqywhh' name='23-04.csv' table='[23-04#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                    <column datatype='string' name='CountryOther' ordinal='0' />
                    <column datatype='integer' name='TotalCases' ordinal='1' />
                    <column datatype='integer' name='NewCases' ordinal='2' />
                    <column datatype='integer' name='TotalDeaths' ordinal='3' />
                    <column datatype='integer' name='NewDeaths' ordinal='4' />
                    <column datatype='integer' name='TotalRecovered' ordinal='5' />
                    <column datatype='integer' name='NewRecovered' ordinal='6' />
                    <column datatype='integer' name='ActiveCases' ordinal='7' />
                    <column datatype='integer' name='SeriousCritical' ordinal='8' />
                    <column datatype='date' name='Date' ordinal='9' />
                  </columns>
                </relation>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Quan hệ tuyến tính 2 biến'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Quan hệ tuyến tính 2 biến</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='24-04' name='federated.1bx7qx20vpkotg14d91mc0vw9rum' />
          </datasources>
          <datasource-dependencies datasource='federated.1bx7qx20vpkotg14d91mc0vw9rum'>
            <column caption='Active Cases' datatype='real' name='[ActiveCases]' role='measure' type='quantitative' />
            <column caption='Country Other' datatype='string' name='[CountryOther]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Serious Critical' datatype='real' name='[SeriousCritical]' role='measure' type='quantitative' />
            <column caption='Total Cases' datatype='integer' name='[TotalCases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[TotalDeaths]' role='measure' type='quantitative' />
            <column caption='Total Recovered' datatype='integer' name='[TotalRecovered]' role='measure' type='quantitative' />
            <column-instance column='[CountryOther]' derivation='None' name='[none:CountryOther:nk]' pivot='key' type='nominal' />
            <column-instance column='[ActiveCases]' derivation='Sum' name='[sum:ActiveCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SeriousCritical]' derivation='Sum' name='[sum:SeriousCritical:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalCases]' derivation='Sum' name='[sum:TotalCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalDeaths]' derivation='Sum' name='[sum:TotalDeaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalRecovered]' derivation='Sum' name='[sum:TotalRecovered:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.47176796197891235' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.47176796197891235' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.47176796197891235' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.47176796197891235' />
              </style-rule>
            </style>
          </pane>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.47176796197891235' />
              </style-rule>
            </style>
          </pane>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:SeriousCritical:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.47176796197891235' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk] + ([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk] + ([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk] + ([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk] + [federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:SeriousCritical:qk]))))</rows>
        <cols>([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk] + ([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk] + ([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk] + ([federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk] + [federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:SeriousCritical:qk]))))</cols>
      </table>
      <simple-id uuid='{4313C3BA-3F88-4754-BD98-B5D06919ABBB}' />
    </worksheet>
    <worksheet name='Total Cases - Total Deaths - Active Cases'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Total Cases - Total Deaths - Active Cases
</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='24-04' name='federated.1bx7qx20vpkotg14d91mc0vw9rum' />
          </datasources>
          <datasource-dependencies datasource='federated.1bx7qx20vpkotg14d91mc0vw9rum'>
            <column caption='Active Cases' datatype='real' name='[ActiveCases]' role='measure' type='quantitative' />
            <column caption='Country Other' datatype='string' name='[CountryOther]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Total Cases' datatype='integer' name='[TotalCases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[TotalDeaths]' role='measure' type='quantitative' />
            <column-instance column='[CountryOther]' derivation='None' name='[none:CountryOther:nk]' pivot='key' type='nominal' />
            <column-instance column='[ActiveCases]' derivation='Sum' name='[sum:ActiveCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalCases]' derivation='Sum' name='[sum:TotalCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalDeaths]' derivation='Sum' name='[sum:TotalDeaths:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([TotalCases])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:CountryOther:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' direction='DESC' using='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]' />
          <slices>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</column>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-markers-mode' value='all' />
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[Multiple Values]</rows>
        <cols>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</cols>
      </table>
      <simple-id uuid='{35AD13AA-8B82-4D17-B1E5-D8344DFCD11F}' />
    </worksheet>
    <worksheet name='Total Cases - Total Deaths - Total Recovered'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Total Cases - Total Deaths - Total Recovered
</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='24-04' name='federated.1bx7qx20vpkotg14d91mc0vw9rum' />
          </datasources>
          <datasource-dependencies datasource='federated.1bx7qx20vpkotg14d91mc0vw9rum'>
            <column caption='Country Other' datatype='string' name='[CountryOther]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Total Cases' datatype='integer' name='[TotalCases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[TotalDeaths]' role='measure' type='quantitative' />
            <column caption='Total Recovered' datatype='integer' name='[TotalRecovered]' role='measure' type='quantitative' />
            <column-instance column='[CountryOther]' derivation='None' name='[none:CountryOther:nk]' pivot='key' type='nominal' />
            <column-instance column='[TotalCases]' derivation='Sum' name='[sum:TotalCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalDeaths]' derivation='Sum' name='[sum:TotalDeaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalRecovered]' derivation='Sum' name='[sum:TotalRecovered:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([TotalCases])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:CountryOther:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' direction='DESC' using='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]' />
          <slices>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</column>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-markers-mode' value='all' />
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[Multiple Values]</rows>
        <cols>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</cols>
      </table>
      <simple-id uuid='{353BC7F6-600E-4DFD-86CA-1240A2532103}' />
    </worksheet>
    <worksheet name='Total Cases - Total Deaths - Total Recovered - Active Cases'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Total Cases - Total Deaths - Total Recovered - Active Cases
</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='24-04' name='federated.1bx7qx20vpkotg14d91mc0vw9rum' />
          </datasources>
          <datasource-dependencies datasource='federated.1bx7qx20vpkotg14d91mc0vw9rum'>
            <column caption='Active Cases' datatype='real' name='[ActiveCases]' role='measure' type='quantitative' />
            <column caption='Country Other' datatype='string' name='[CountryOther]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Total Cases' datatype='integer' name='[TotalCases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[TotalDeaths]' role='measure' type='quantitative' />
            <column caption='Total Recovered' datatype='integer' name='[TotalRecovered]' role='measure' type='quantitative' />
            <column-instance column='[CountryOther]' derivation='None' name='[none:CountryOther:nk]' pivot='key' type='nominal' />
            <column-instance column='[ActiveCases]' derivation='Sum' name='[sum:ActiveCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalCases]' derivation='Sum' name='[sum:TotalCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalDeaths]' derivation='Sum' name='[sum:TotalDeaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalRecovered]' derivation='Sum' name='[sum:TotalRecovered:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([TotalCases])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:CountryOther:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' direction='DESC' using='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]' />
          <slices>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</column>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-markers-mode' value='all' />
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[Multiple Values]</rows>
        <cols>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</cols>
      </table>
      <simple-id uuid='{498A2DC8-4154-40DF-A3F6-7C37A85E8DBD}' />
    </worksheet>
    <worksheet name='Total Cases - Total Recovered - Active Cases'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Total Cases - Total Recovered - Active Cases
</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='24-04' name='federated.1bx7qx20vpkotg14d91mc0vw9rum' />
          </datasources>
          <datasource-dependencies datasource='federated.1bx7qx20vpkotg14d91mc0vw9rum'>
            <column caption='Active Cases' datatype='real' name='[ActiveCases]' role='measure' type='quantitative' />
            <column caption='Country Other' datatype='string' name='[CountryOther]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Total Cases' datatype='integer' name='[TotalCases]' role='measure' type='quantitative' />
            <column caption='Total Recovered' datatype='integer' name='[TotalRecovered]' role='measure' type='quantitative' />
            <column-instance column='[CountryOther]' derivation='None' name='[none:CountryOther:nk]' pivot='key' type='nominal' />
            <column-instance column='[ActiveCases]' derivation='Sum' name='[sum:ActiveCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalCases]' derivation='Sum' name='[sum:TotalCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalRecovered]' derivation='Sum' name='[sum:TotalRecovered:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]&quot;</bucket>
              <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([TotalCases])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:CountryOther:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' direction='DESC' using='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]' />
          <slices>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</column>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-markers-mode' value='all' />
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[Multiple Values]</rows>
        <cols>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</cols>
      </table>
      <simple-id uuid='{3DC601B7-DFB3-40DE-A1DC-2A588514CABB}' />
    </worksheet>
    <worksheet name='Total Cases = Total Deaths + Total Recovered + Active Cases'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Total Cases = Total Deaths + Total Recovered + Active Cases</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='24-04' name='federated.1bx7qx20vpkotg14d91mc0vw9rum' />
          </datasources>
          <datasource-dependencies datasource='federated.1bx7qx20vpkotg14d91mc0vw9rum'>
            <column caption='Active Cases' datatype='real' name='[ActiveCases]' role='measure' type='quantitative' />
            <column caption='Country Other' datatype='string' name='[CountryOther]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Total Cases' datatype='integer' name='[TotalCases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[TotalDeaths]' role='measure' type='quantitative' />
            <column caption='Total Recovered' datatype='integer' name='[TotalRecovered]' role='measure' type='quantitative' />
            <column-instance column='[CountryOther]' derivation='None' name='[none:CountryOther:nk]' pivot='key' type='nominal' />
            <column-instance column='[ActiveCases]' derivation='Sum' name='[sum:ActiveCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalDeaths]' derivation='Sum' name='[sum:TotalDeaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalRecovered]' derivation='Sum' name='[sum:TotalRecovered:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([TotalCases])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:CountryOther:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' direction='DESC' using='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]' />
          <slices>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</column>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[Multiple Values]' field-type='quantitative' reverse='true' scope='cols' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' />
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#ba9582' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#72b966' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</rows>
        <cols>([federated.1bx7qx20vpkotg14d91mc0vw9rum].[Multiple Values] + [federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk])</cols>
      </table>
      <simple-id uuid='{52E0DF10-48D9-4F54-9F84-19303C4D98B5}' />
    </worksheet>
    <worksheet name='phương'>
      <table>
        <view>
          <datasources>
            <datasource caption='24-04' name='federated.1bx7qx20vpkotg14d91mc0vw9rum' />
          </datasources>
          <datasource-dependencies datasource='federated.1bx7qx20vpkotg14d91mc0vw9rum'>
            <column caption='Active Cases' datatype='real' name='[ActiveCases]' role='measure' type='quantitative' />
            <column caption='Country Other' datatype='string' name='[CountryOther]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Total Cases' datatype='integer' name='[TotalCases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[TotalDeaths]' role='measure' type='quantitative' />
            <column caption='Total Recovered' datatype='integer' name='[TotalRecovered]' role='measure' type='quantitative' />
            <column-instance column='[CountryOther]' derivation='None' name='[none:CountryOther:nk]' pivot='key' type='nominal' />
            <column-instance column='[ActiveCases]' derivation='Sum' name='[sum:ActiveCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalCases]' derivation='Sum' name='[sum:TotalCases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalDeaths]' derivation='Sum' name='[sum:TotalDeaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TotalRecovered]' derivation='Sum' name='[sum:TotalRecovered:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]' included-values='in-range'>
            <min>3080344</min>
            <max>25339874</max>
          </filter>
          <slices>
            <column>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]' palette='red_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]' />
              <size column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]' />
              <text column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
              <lod column='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='2.6408839225769043' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='shape' value=':filled/circle' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalDeaths:qk]</rows>
        <cols>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalCases:qk]</cols>
      </table>
      <simple-id uuid='{C1E4E83F-623A-44CF-9A49-6EB3CABA7DEF}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='Total Cases - Total Deaths - Total Recovered - Active Cases'>
      <cards>
        <edge name='left'>
          <strip size='240'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='196'>
            <card pane-specification-id='7' param='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</field>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6FD2F5BD-595E-4736-A882-598A5F111ED7}' />
    </window>
    <window class='worksheet' name='Total Cases - Total Deaths - Total Recovered'>
      <cards>
        <edge name='left'>
          <strip size='241'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='197'>
            <card pane-specification-id='7' param='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</field>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5C9B17AE-0A1E-489B-9CA5-7B95F1FDB242}' />
    </window>
    <window class='worksheet' name='Total Cases - Total Deaths - Active Cases'>
      <cards>
        <edge name='left'>
          <strip size='241'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='197'>
            <card pane-specification-id='7' param='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</field>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{633BF36A-BB79-4B74-849F-A2B59A6E6113}' />
    </window>
    <window class='worksheet' name='Total Cases - Total Recovered - Active Cases'>
      <cards>
        <edge name='left'>
          <strip size='241'>
            <card type='pages' />
            <card type='filters' />
            <card type='measures' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='197'>
            <card pane-specification-id='7' param='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight field='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]'>
          <color-one-way>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</field>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</field>
          </color-one-way>
          <bucket-selection>
            <bucket>&quot;[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]&quot;</bucket>
          </bucket-selection>
        </highlight>
      </viewpoint>
      <simple-id uuid='{30371DE9-2371-4521-9C5F-D8DE95AAFB13}' />
    </window>
    <window class='worksheet' maximized='true' name='Quan hệ tuyến tính 2 biến'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5A133FCC-25AB-49CD-A2D7-945A1314CCCC}' />
    </window>
    <window class='worksheet' name='phương'>
      <cards>
        <edge name='left'>
          <strip size='224'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:TotalRecovered:qk]' type='size' />
            <card pane-specification-id='0' param='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[sum:ActiveCases:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <simple-id uuid='{86C65210-77E7-46FB-A145-CAA0227B329F}' />
    </window>
    <window class='worksheet' name='Total Cases = Total Deaths + Total Recovered + Active Cases'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[:Measure Names]</field>
            <field>[federated.1bx7qx20vpkotg14d91mc0vw9rum].[none:CountryOther:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BBE5EF34-EC81-404B-A4B9-439BFBBFDD2C}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Quan hệ tuyến tính 2 biến' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='384' name='Total Cases - Total Deaths - Active Cases' width='384'>
      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
    </thumbnail>
    <thumbnail height='384' name='Total Cases - Total Deaths - Total Recovered' width='384'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Total Cases - Total Deaths - Total Recovered - Active Cases' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Total Cases - Total Recovered - Active Cases' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Total Cases = Total Deaths + Total Recovered + Active Cases' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='phương' width='384'>
      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
      rkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
